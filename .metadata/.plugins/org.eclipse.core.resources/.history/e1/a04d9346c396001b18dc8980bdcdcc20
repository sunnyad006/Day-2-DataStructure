package doublyLinkedList;

public class DoublyLinkedList {
	
	private class Node {
		private int data;
		private Node prev,next;
		
		public Node(int val){
			data = val;
		}
	}
	

	private Node head;
	
	
	public DoublyLinkedList(Node head){
		this.head = head;
	}
	
	
	public void push(int newData){
		Node newNode = new Node(newData);
		newNode.next = head;
		newNode.prev = null;
	}
	
	public void append(int newData){
		Node newNode = new Node(newData);
		Node last = head;
		newNode.next = null;
		
		if(head == null){
			newNode.prev =null;
			head = newNode;
			return;
		}
		
		while(last.next !=null)	last = last.next;
		last.next = newNode;
		newNode.prev = last;
	}
	
	public void insertAfter(Node prevNode, int newData){
		if(prevNode==null){
			System.out.println("Previous node cannot be null");
			return;
		}
		Node newNode = new Node(newData);
		newNode.next = prevNode.next;
		prevNode.next = newNode;
		newNode.prev = prevNode;
		
		if(newNode.next != null){
			newNode.next.prev = newNode;
		}
	}
	
	public void printList(Node node){
		Node last = null;
		System.out.println("Traversal in forward Direction");
		while(node !=null){
			System.out.print(node.data + " ");
			last=node;
			node = node.next;
		}
		System.out.println();
        System.out.println("Traversal in reverse direction");
        while(last != null){
        	 System.out.print(last.data + " ");
             last = last.prev;
        }
	}
	
	public static void main(String[] args)
    {
        
        DLL dll = new DLL();
 
        dll.append(6);
 
        dll.push(7);
 
        dll.push(1);
 
        dll.append(4);
 
        dll.InsertAfter(dll.head.next, 8);
 
        System.out.println("Created DLL is: ");
        dll.printlist(dll.head);
    }

}
